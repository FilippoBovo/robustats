import unittest

import robustats


class TestWeightedMedian(unittest.TestCase):
    def test_same_weights(self):
        x = [1.0, 2.0, 3.0]
        weights = [1.0, 1.0, 1.0]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 2.0)

    def test_edge_case(self):
        x = [1.0, 2.0, 3.0]
        weights = [2.0, 1.0, 1.0]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 2.0)

    def test_dominant_weight(self):
        x = [1.0, 2.0, 3.0]
        weights = [3.0, 1.0, 1.0]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 1.0)

    def test_even_list(self):
        x = [1.0, 2.0]
        weights = [1.0, 1.0]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 1.0)

    def test_generic_1(self):
        x = [1.3, 5.1, 2.9, 1.9, 7.4]
        weights = [1.4, 0.9, 0.6, 1.2, 1.7]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 2.9)

    def test_generic_2(self):
        x = [4.2, 1.3, 7.4, 0.2, 4.6, 9.8, 5.5, 3.7]
        weights = [0.4, 2.1, 1.1, 1.6, 0.3, 0.9, 1.2, 1.7]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 3.7)

    def test_generic_3(self):
        x = [0.1, 0.35, 0.05, 0.1, 0.15, 0.05, 0.2]
        weights = [0.1, 0.35, 0.05, 0.1, 0.15, 0.05, 0.2]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 0.2)

    def test_generic_4(self):
        x = [
            0.49,
            0.36,
            0.36,
            0.18,
            0.75,
            0.33,
            0.68,
            0.82,
            0.38,
            0.75,
            0.61,
            0.02,
            0.57,
            0.23,
            0.56,
            0.03,
            0.45,
            0.44,
            0.36,
            0.92,
        ]
        weights = [
            0.08,
            0.22,
            0.79,
            0.84,
            0.69,
            0.84,
            0.08,
            0.87,
            0.95,
            0.27,
            0.9,
            0.34,
            0.75,
            0.65,
            0.02,
            0.83,
            0.32,
            0.68,
            0.92,
            0.37,
        ]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 0.38)

    def test_generic_5(self):
        x = [
            0.64,
            0.95,
            0.05,
            0.08,
            0.32,
            0.25,
            0.58,
            0.69,
            0.88,
            0.53,
            0.48,
            0.58,
            0.32,
            0.52,
            0.42,
            0.69,
            0.43,
            0.91,
            0.15,
            0.27,
            0.31,
            0.16,
            0.56,
            0.68,
            0.58,
            0.04,
            0.51,
            0.06,
            0.18,
            0.03,
        ]
        weights = [
            0.97,
            0.2,
            0.12,
            0.01,
            0.86,
            0.29,
            0.93,
            0.96,
            0.89,
            0.03,
            0.24,
            0.56,
            0.81,
            0.97,
            0.48,
            0.32,
            0.33,
            0.22,
            0.8,
            0.17,
            0.96,
            0.75,
            0.43,
            0.24,
            0.81,
            0.4,
            0.93,
            0.43,
            0.17,
            0.13,
        ]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 0.51)

    def test_generic_6(self):
        x = [
            0.19,
            0.14,
            0.15,
            0.79,
            0.36,
            0.13,
            0.44,
            0.67,
            0.44,
            0.98,
            0.2,
            0.11,
            0.78,
            0.67,
            0.28,
            0.29,
            0.99,
            0.55,
            0.34,
            0.36,
            0.09,
            0.13,
            0.56,
            0.19,
            0.08,
            0.46,
            0.62,
            0.98,
            0.46,
            0.37,
            0.09,
            0.94,
            0.84,
            0.64,
            0.18,
            0.64,
            0.78,
            0.88,
            0.17,
            0.28,
        ]
        weights = [
            0.67,
            0.39,
            0.31,
            0.06,
            0.93,
            0.21,
            0.09,
            0.29,
            0.78,
            0.42,
            0.79,
            0.27,
            0.77,
            0.35,
            0.11,
            0.99,
            0.05,
            0.39,
            0.34,
            0.97,
            0.82,
            0.4,
            0.09,
            0.77,
            0.28,
            0.03,
            0.63,
            0.67,
            0.1,
            0.3,
            0.85,
            0.44,
            0.66,
            0.52,
            0.15,
            0.4,
            0.82,
            0.66,
            0.21,
            0.72,
        ]
        weighted_median = robustats.weighted_median(x, weights)
        self.assertEqual(weighted_median, 0.36)


class TestMedcouple(unittest.TestCase):
    def test_homogeneous_sample_1(self):
        x = [1.0, 2.0, 3.0]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, 0.0)

    def test_homogeneous_sample_2(self):
        x = [-1.0, 0.0, 1.0]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, 0.0)

    def test_homogeneous_sample_3(self):
        x = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, 0.0)

    def test_generic_1(self):
        x = [1.0, 2.0, 2.0, 2.0, 3.0, 4.0, 5.0, 6.0]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, 1.0)

    def test_generic_2(self):
        x = [0.2, 0.17, 0.08, 0.16, 0.88, 0.86, 0.09, 0.54, 0.27, 0.14]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, 0.7692307692307692)

    def test_generic_3(self):
        x = [
            0.61,
            0.96,
            0.76,
            0.69,
            0.18,
            0.81,
            0.32,
            0.69,
            0.91,
            0.37,
            0.0,
            0.66,
            0.99,
            0.59,
            0.73,
            0.41,
            0.28,
            0.45,
            0.63,
            0.03,
        ]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, -0.3333333333333333)

    def test_generic_4(self):
        x = [
            0.44,
            0.66,
            0.18,
            0.51,
            0.34,
            0.7,
            0.86,
            0.97,
            0.15,
            0.53,
            0.85,
            0.28,
            0.13,
            0.74,
            0.52,
            0.21,
            0.87,
            0.7,
            0.17,
            0.84,
            0.86,
            0.01,
            0.42,
            0.27,
            0.22,
            0.88,
            0.16,
            0.57,
            0.66,
            0.88,
        ]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, -0.014925373134328474)

    def test_generic_5(self):
        x = [
            0.7,
            0.49,
            0.07,
            0.4,
            0.44,
            0.36,
            0.02,
            0.88,
            0.94,
            0.9,
            0.46,
            0.93,
            0.81,
            0.92,
            0.32,
            0.43,
            0.64,
            0.01,
            0.37,
            0.46,
            0.47,
            0.13,
            0.29,
            0.1,
            0.04,
            0.9,
            0.55,
            0.27,
            0.28,
            0.46,
            0.46,
            0.1,
            0.81,
            0.55,
            0.95,
            0.58,
            0.12,
            0.61,
            0.92,
            0.93,
        ]
        weighted_median = robustats.medcouple(x)
        self.assertEqual(weighted_median, 0.11363636363636356)

    def test_generic_6(self):
        x = [
            0.0505706944449772,
            0.0070789828326770,
            0.0145334224599414,
            -1280333333333327.25,
            0.0178606365320585,
            0.0159061520516996,
            0.0495797121923138,
            0.0372914134531425,
            0.0086590507191233,
            0.0342721535196032,
            0.0288586130658244,
            0.0891596218069022,
            0.0202072309208743,
            0.0027620383032866,
            0.0233732669912843,
            0.1865468871246087,
            0.0173565462129963,
            0.0104139554969637,
            0.0266508563992725,
            0.0373124895253732,
            0.0131169704080612,
            0.0031887476865323,
            0.0143710595738763,
            0.0322354668298504,
            0.0294735839414661,
            0.0122837537449381,
            0.0267517280982628,
            0.0068281122378599,
            0.0151625523958615,
            0.0061592749407757,
            0.0107378571832244,
            0.0119136370586005,
            0.0146724196670181,
            0.0038624468691959,
            0.0235013060607214,
            0.0113202059376254,
            0.0091049718745908,
            0.0168825805985806,
            0.0108199342234192,
            0.0027639654633587,
            0.0030246192288427,
            0.0047684659517705,
            0.0224934868968038,
            0.0029102614072389,
            0.1400529170920381,
            0.0140046511247422,
            0.0226471234402149,
            0.0450516454392481,
            0.0344214786601053,
            0.0225270115362316,
            0.0203289474178167,
            0.0642451700532145,
            0.0023796045829170,
            0.0096026178924646,
            0.0018286968595304,
            0.0173180024192163,
            0.0029640154872383,
            0.0090899315377448,
            -8999966666665.66796875,
            0.0263888888888871,
            0.0180397698451483,
            0.0105417609596879,
            0.0159701618017080,
            0.0771666666663945,
            0.0168133405020899,
            0.0226498754810608,
            0.0236652480161304,
            0.0061248673460334,
            0.0368908993258367,
            0.0208802868517923,
            0.0072598401999189,
            0.0042511407087516,
            0.0645612791740193,
            0.0203739136165394,
            0.0106441889697796,
            0.0105007977826955,
            0.0115078450670317,
            0.0240690089899113,
            0.0044714485577000,
            0.0155542942172829,
            0.0314208107418210,
            0.0025445180401967,
            0.0050600600600526,
            0.0036932995864006,
            0.0045972567155374,
            0.0071503233340459,
            0.0111110017202276,
            0.0147312508876464,
            0.0049586078617475,
            0.0299679654662874,
            0.0776109640212362,
            0.0124735142808461,
            0.0111227363869411,
            0.0112458087419498,
            0.0256286634017333,
            0.0003825841058346,
            0.0110058557347766,
            0.0440566799681710,
            0.0074811249204627,
            0.0414998560716491,
            0.0089136594500355,
            0.0194342405150806,
            0.0066161696126370,
            0.0070430316605803,
            0.0053435784935211,
            -14333333333282.3203125,
            0.0703412629445435,
            0.0266451396069719,
            0.0299716051514547,
            0.0054772379837127,
            0.0103300334945842,
            -0.0386815247126384,
            -0.0421857517593541,
            0.1043175682399068,
            0.0211223238649025,
            0.0038994709270129,
            0.0264056259463899,
            0.0107163107920092,
            0.0126539201374586,
            0.0087148594377257,
            0.0158425909179287,
            -0.0187436197495519,
            0.0090613841074562,
            0.0199250656201976,
            0.0995828927216849,
            0.0150462444750902,
            0.0305755001750538,
            0.0384711785949878,
            0.0350921954199814,
            0.0120941733897791,
            0.0036177856947875,
            0.0399918414851022,
            0.0103393067369495,
            0.0091165102669316,
            0.0118395957025749,
            0.0137370249872021,
            0.0082613339925921,
            0.0098020148373935,
            0.0032443060311902,
            0.0471110949612384,
            0.0129410058690843,
            0.7146644630825235,
            0.0093728785574007,
            0.0159417490710798,
            0.0252396566351271,
            0.0080190899207273,
            0.0097634430636786,
            0.0117633667806713,
            0.0103429657638357,
            0.0097294778834895,
            0.0370292809953746,
            0.0183956513422159,
            0.0104138982619521,
            0.0300750093631585,
            0.0354237913161790,
            0.0079921856095884,
            0.0202564278906056,
            -0.0113249557094176,
            0.0342129475430319,
            0.0294170386488116,
            0.0174558742005798,
            0.0127432816521509,
            0.0057835665742338,
            0.0046479004058365,
            0.0423393689629025,
            -0.0016952109258995,
            0.0189301691347340,
            0.0169483213811876,
            0.0071468070029358,
            0.0030424039097245,
            0.0337794628703385,
            0.0070741265460534,
            0.0042172687399545,
            0.0447718946351764,
            0.0678458627788991,
            0.0170138107548074,
            0.0026032169419886,
            0.0034858563640110,
            0.0333165565026353,
            0.0207584830340182,
            -0.0022437448404433,
            0.0074340697938767,
            0.0055538696218188,
            0.0078187132247658,
            0.0095282514795251,
        ]
        result = robustats.medcouple(x)
        self.assertEqual(result, 0.4176470452896032)


class TestMode(unittest.TestCase):
    def test_homogeneous_sample(self):
        x = [1.0, 2.0, 3.0, 4.0, 5.0]
        mode = robustats.mode(x)
        self.assertEqual(mode, 2.0)

    def test_generic_1(self):
        x = [1.0, 2.0, 3.0, 3.0, 4.0, 5.0]
        mode = robustats.mode(x)
        self.assertEqual(mode, 3.0)

    def test_generic_2(self):
        x = [1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 5.0]
        mode = robustats.mode(x)
        self.assertEqual(mode, 3.0)

    def test_generic_3(self):
        x = [1.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 5.0]
        mode = robustats.mode(x)
        self.assertEqual(mode, 3.0)

    def test_generic_4(self):
        x = [1.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 6.0, 7.0]
        mode = robustats.mode(x)
        self.assertEqual(mode, 4.0)

    def test_gaussian_1(self):
        # Gaussian distribution with mu = 1.0 and sigma = 0.2 --> mode = 1.0
        x = [1.06, 1.25, 0.99, 1.07, 1.46, 1.02, 1.14, 1.04, 0.6, 1.0]
        mode = robustats.mode(x)
        self.assertEqual(mode, 0.995)

    def test_gaussian_2(self):
        # Gaussian distribution with mu = 3.0 and sigma = 0.5 --> mode = 3.0
        x = [
            2.89,
            3.32,
            3.19,
            3.35,
            3.84,
            3.22,
            3.46,
            3.45,
            3.06,
            3.59,
            2.44,
            3.51,
            3.73,
            3.35,
            2.26,
            2.0,
            2.15,
            3.25,
            3.21,
            3.4,
        ]
        mode = robustats.mode(x)
        self.assertEqual(mode, 3.35)

    def test_gaussian_3(self):
        # Gaussian distribution with mu = 10.0 and sigma = 1.0 --> mode = 10.0
        x = [
            9.67,
            10.43,
            8.34,
            8.47,
            10.31,
            11.01,
            9.99,
            10.72,
            8.61,
            11.33,
            10.87,
            9.38,
            8.79,
            9.07,
            10.7,
            11.14,
            9.73,
            9.72,
            9.8,
            12.06,
            10.99,
            10.12,
            10.67,
            9.71,
            9.74,
            9.85,
            8.65,
            8.71,
            10.07,
            8.54,
        ]
        mode = robustats.mode(x)
        self.assertEqual(mode, 9.715)

    def test_gamma_1(self):
        # Gamma distribution with alpha = 11.0 and beta = 10.0 --> mode = 1.0
        x = [1.17, 0.82, 0.85, 2.1, 1.35, 1.21, 1.07, 0.81, 1.09, 1.27]
        mode = robustats.mode(x)
        self.assertEqual(mode, 1.08)

    def test_gamma_2(self):
        # Gamma distribution with alpha = 21.0 and beta = 10.0 --> mode = 2.0
        x = [
            2.04,
            2.22,
            2.27,
            1.71,
            2.45,
            1.55,
            2.38,
            2.15,
            1.95,
            3.34,
            2.74,
            1.92,
            1.68,
            2.1,
            2.13,
            2.6,
            1.36,
            2.25,
            2.85,
            1.55,
        ]
        mode = robustats.mode(x)
        self.assertEqual(mode, 2.26)

    def test_gamma_3(self):
        # Gamma distribution with alpha = 61.0 and beta = 20.0 --> mode = 3.0
        x = [
            2.95,
            2.29,
            3.24,
            3.57,
            3.7,
            3.0,
            3.07,
            3.73,
            2.98,
            2.96,
            2.59,
            3.61,
            3.09,
            2.65,
            2.37,
            2.66,
            2.88,
            2.92,
            2.3,
            3.9,
            3.49,
            3.67,
            2.09,
            2.98,
            2.52,
            3.37,
            3.29,
            3.18,
            3.16,
            2.68,
        ]
        mode = robustats.mode(x)
        self.assertEqual(mode, 2.98)
